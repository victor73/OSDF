<?xml version="1.0" encoding="utf-8"?>
<project name="OSDF" basedir="." default="dist">
    <property name="dist.dir" value="dist"/>
    <property name="build.dir" value="build"/>
    <property name="lib.dir" value="lib"/>
    <property name="bin.dir" value="bin"/>
    <property name="conf.dir" value="conf"/>
    <property name="util.dir" value="util"/>

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
          <pathelement location="${util.dir}/ant-contrib-0.6.jar"/>
        </classpath>
    </taskdef>

    <!-- Project specific properties -->
    <property name="app.name" value="${ant.project.name}"/>
    <property name="app.name.lc" value="osdf"/>
    <property name="app.version" value="0.7"/>
    <property name="app.packager" value="Victor Felix &lt;vfelix@som.umaryland.edu&gt;"/>

    <target name="prepare" description="Creates the necessary directories for building.">
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${build.dir}"/>
    </target>

    <target name="clean" description="Returns the distribution to a pristine state.">
        <delete dir="${dist.dir}"/>
        <delete dir="${build.dir}"/>
    </target>

    <target name="dist" depends="prepare" description="Generates the project distribution.">
        <tar destfile="${dist.dir}/${app.name.lc}-${app.version}.tar.gz" compression="gzip">
          <tarfileset dir="." prefix="${app.name.lc}-${app.version}">
            <include name="*.js"/>
          </tarfileset>
          <tarfileset dir="." prefix="${app.name.lc}-${app.version}">
            <include name="nodelint.conf"/>
          </tarfileset>
          <tarfileset dir="logs" prefix="${app.name.lc}-${app.version}/logs">
            <exclude name="*.log"/>
          </tarfileset>
          <tarfileset dir="bin" prefix="${app.name.lc}-${app.version}/bin"/>
          <tarfileset dir="lib" prefix="${app.name.lc}-${app.version}/lib"/>
          <tarfileset dir="conf" prefix="${app.name.lc}-${app.version}/conf"/>
          <tarfileset dir="working" prefix="${app.name.lc}-${app.version}/working"/>
          <tarfileset dir="node_modules" prefix="${app.name.lc}-${app.version}/node_modules"/>
          <tarfileset dir="docs" prefix="${app.name.lc}-${app.version}/docs"/>
          <tarfileset dir="test" prefix="${app.name.lc}-${app.version}/test"/>
          <tarfileset dir="rpm" prefix="${app.name.lc}-${app.version}/rpm"/>
          <tarfileset dir="debian" prefix="${app.name.lc}-${app.version}/debian"/>
        </tar>

        <echo>Done. Check the "dist" directory for the disribution file.</echo>
    </target>

    <target name="rpm_prep" depends="prepare" description="Creates the file structure necessary for rpm creation.">
        <mkdir dir="${build.dir}/rpm"/>
        <mkdir dir="${build.dir}/rpm/SPECS"/>
        <mkdir dir="${build.dir}/rpm/SOURCES"/>
        <mkdir dir="${build.dir}/rpm/SRPMS"/>
        <mkdir dir="${build.dir}/rpm/RPMS"/>
        <mkdir dir="${build.dir}/rpm/BUILD"/>
    </target>

    <target name="rpm" depends="rpm_prep,dist" description="Creates an rpm package for the application.">
      <copy file="rpm/${app.name.lc}.spec.template" tofile="${build.dir}/rpm/SPECS/${app.name.lc}.spec"/>
      <replace file="${build.dir}/rpm/SPECS/${app.name.lc}.spec" token="@name@" value="${app.name}"/>
      <replace file="${build.dir}/rpm/SPECS/${app.name.lc}.spec" token="@lc_name@" value="${app.name.lc}"/>
      <replace file="${build.dir}/rpm/SPECS/${app.name.lc}.spec" token="@version@" value="${app.version}"/>
      <replace file="${build.dir}/rpm/SPECS/${app.name.lc}.spec" token="@packager@" value="${app.packager}"/>

      <copy file="${dist.dir}/${app.name.lc}-${app.version}.tar.gz" todir="${build.dir}/rpm/SOURCES"/>
      <rpm specFile="${app.name.lc}.spec" topDir="${build.dir}/rpm" cleanBuildDir="true" failOnError="true"/>

      <copy overwrite="true" todir="${dist.dir}">
          <fileset dir="${build.dir}/rpm/RPMS/noarch/"/>
      </copy>
      <echo>RPM file created. Please check the ${dist.dir} directory.</echo>
    </target>

    <target name="can_debuild" description="Checks if we are on unix and if debuild is available.">
      <echo>Checking for unix and debuild availability</echo>
      <property environment="env" />
      <condition property="debuild.present">
        <and>
          <os family="unix"/>
          <available file="debuild" type="file">
            <filepath>
              <pathelement path="${env.PATH}"/>
            </filepath>
          </available>
        </and>
      </condition>
      <if>
        <equals arg1="${debuild.present}" arg2="true"/>
          <then>
            <echo>debuild available: true</echo>
          </then>
          <else>
            <echo>debuild available: false</echo>
          </else>
      </if>
    </target>

    <target name="deb" depends="can_debuild,dist" description="Create a debian package.">
      <if>
        <equals arg1="${debuild.present}" arg2="true"/>
        <then>
            <property name="tarball" value="${app.name.lc}-${app.version}.tar.gz"/>
            <property name="debian.orig.tar" value="${app.name.lc}_${app.version}.orig.tar.gz"/>
            <copy file="${dist.dir}/${tarball}" todir="${build.dir}"/>
            <copy file="${dist.dir}/${tarball}" tofile="${build.dir}/${debian.orig.tar}"/>

            <untar src="${build.dir}/${tarball}" failOnEmptyArchive="true" compression="gzip" dest="${build.dir}"/>

            <exec dir="${build.dir}/${app.name.lc}-${app.version}" executable="debuild" failonerror="true">
              <arg value="-us"/>
              <arg value="-uc"/>
            </exec>

            <copy overwrite="true" todir="${dist.dir}">
              <fileset dir="${build.dir}">
                <include name="*.deb"/>
              </fileset>
            </copy>
            <echo>Debian package created. Please check the ${dist.dir} directory."</echo>
        </then>
        <else>
          <echo>Unable to build debian package. Not a unix system or debuild not available.</echo>
        </else>
      </if>
    </target>

</project>
